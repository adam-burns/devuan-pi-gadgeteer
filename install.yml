---
- name: Install some packages
  hosts: all

  vars:
    controller_hostname: "{{ lookup('env', 'HOSTNAME') }}"
    controller_hostname_domain: "{{ lookup('env', 'HOSTNAME').split('.')[1:] | join('.') }}"
    controller_domainname: "{{ lookup('env', 'DOMAINNAME') | default(controller_hostname_domain, true) }}"

  tasks:

# Wait until host is ready
   - name: Wait for host {{inventory_hostname}} connection
     wait_for_connection:
    
   - name: Assign random RFC1981 net prefix
     set_fact:
       random_net_prefix: "192.168.{{ 128 | random + 127 }}"

   - name: Assign gadget net prefix from env or random default
     set_fact:
       gadget_net_prefix: "{{ lookup('env', 'GADGET_NET_PREFIX') | default(random_net_prefix, true) }}"

   - name: Assign domain
     set_fact:
       gadget_net_domain: "{{ lookup('env', 'GADGET_NET_DOMAIN') | default(controller_domainname, true) }}"

# Install bridge-utils for bridging both usb ethernet interfaces
   - name: install bridge-utils
     package:
       name: bridge-utils
       state: present

# Install avahi-autoipd for zeroconf networking (ipv4ll method) on usb[0,1]
   - name: install avahi-autoipd
     package:
       name: avahi-autoipd
       state: present

# Configure mdns services for ssh/sftp
   - name: Configure ssh avahi service
     copy:
       src: /usr/share/doc/avahi-daemon/examples/ssh.service
       dest: /etc/avahi/services/
       remote_src: yes
     register: avahi_daemon_configuration

   - name: Configure ssh avahi service
     copy:
       src: /usr/share/doc/avahi-daemon/examples/sftp-ssh.service
       dest: /etc/avahi/services/
       remote_src: yes
     register: avahi_daemon_configuration

# Install dnsmasq for dhcp over br0 interface
   - name: install dnsmasq
     package:
       name: dnsmasq
       state: present

   - name: Configure dnsmasq from template
     template:
       src: etc/dnsmasq.d/usb.conf.j2
       dest: /etc/dnsmasq.d/usb.conf
     register: dnsmasq_configuration

# DEBUG Clone Reflow repo
   - name: Clone devuan-pi-gadgeteer repository
     git:
       repo: https://github.com/adam-burns/devuan-pi-gadgeteer
       dest: devuan-pi-setup
       version: master
       clone: yes
       update: yes

# Add loading overlay module dwc2 to cmdline.txt
   - name: "Add loading overlay module dwc2 to cmdline.txt"
     become: yes
     become_user: root
     replace: 
       path: /boot/cmdline.txt
       regexp: '^(.*)rootwait$'
       replace: '\1 rootwait modules-load=dwc2'
       backup: no
     register: cmdline_updated

   - name: Check if dtoverlay=dwc2 is present
     become: yes
     become_user: root
     lineinfile:
       state: absent
       path: "/boot/config.txt"
       regexp: "^dtoverlay=dwc2"
     check_mode: true
     changed_when: false # This just makes things look prettier in the logs
     register: check
   
   - name: Add dtoverlay=dwc2 if not present
     lineinfile:
       state: present
       path: "/boot/config.txt"
       line: "dtoverlay=dwc2"
     when: check.found == 0

   - name: Check if libcomposite module is configured in /etc/modules
     become: yes
     become_user: root
     lineinfile:
       state: absent
       path: "/etc/modules"
       regexp: "^libcomposite"
     check_mode: true
     changed_when: false # This just makes things look prettier in the logs
     register: check
   
   - name: Add libcomposite if not present
     lineinfile:
       state: present
       path: "/etc/modules"
       line: "libcomposite"
     when: check.found == 0

# Configure USB Network Interfaces
   - name: Configure usb0 network interface
     ansible.builtin.copy:
       src: etc/network/interfaces.d/usb0.conf
       dest: /etc/network/interfaces.d/usb0.conf

   - name: Configure usb1 network interface
     ansible.builtin.copy:
       src: etc/network/interfaces.d/usb1.conf
       dest: /etc/network/interfaces.d/usb1.conf

   - name: Create br0 network config from template
     template:
       src: etc/network/interfaces.d/br0.conf.j2
       dest: /etc/network/interfaces.d/br0.conf
     register: bridge_configuration

# Change /etc/hosts entry
   - name: Update the /etc/hosts file with node name
     lineinfile:
       path: "/etc/hosts"
       regexp: ".*\t{{ansible_hostname}}"
       # line: "{{ ansible_br0.ipv4.address }}\t{{ ansible_hostname }}"
       line: "{{ gadget_net_prefix }}.1\t{{ ansible_hostname }}"
       state: present
       backup: yes

# Configure sysctl for IP forwarding
   - name: configure network forwarding
     ansible.builtin.copy:
       src: etc/sysctl.d/30-forwarding.conf
       dest: /etc/sysctl.d/30-forwarding.conf

   - name: Create /var/lib/dnsmasq if it does not exist
     ansible.builtin.file:
       path: /var/lib/dnsmasq
       state: directory
       mode: '0755'

   - name: Create /etc/boot.d if it does not exist
     ansible.builtin.file:
       path: /etc/boot.d
       state: directory
       mode: '0755'

   - name:  network masquerading set at boot
     ansible.builtin.copy:
       src: etc/boot.d/masquerade.nft
       dest: /etc/boot.d/masquerade
       mode: '0755'

   - name: usb_gadget set at boot
     ansible.builtin.copy:
       src: etc/boot.d/usb_gadget.sh
       dest: /etc/boot.d/usb_gadget
       mode: '0755'


   - name: install usb_gadget
     ansible.builtin.copy:
       src: usb_gadget
       dest: /usr/local/bin/usb_gadget
       mode: '0755'

       #   - name: restart network-manager
       #     sysvinit:
       #       name: network-manager
       #       state: restarted

   - name: reboot if necessary
     ansible.builtin.reboot:
       reboot_timeout: 3600
     when: cmdline_updated.changed

       ##   
       #   - name: enable dnsmasq
       #     sysvinit:
       #       name: dnsmasq
       #       state: started
       #       enabled: yes
       #
       #   - name: execute nft masquerade script
       #     become: yes
       #     become_user: root
       #     command: /etc/boot.d/masquerade
       #
       #   - name: execute usb_gadget
       #     become: yes
       #     become_user: root
       #     command: /usr/local/bin/usb_gadget

